name: Update Scoop Manifests and README (Python)

on:
  workflow_dispatch: # به شما اجازه می‌ده اکشن رو به صورت دستی از طریق تب Actions در گیت‌هاب اجرا کنید
  schedule:
    - cron: '30 16 * * *' # هر روز ساعت 16:30 UTC (حدوداً ۸ شب به وقت تهران)

jobs:
  update_manifests:
    runs-on: windows-latest # ماشین مجازی ویندوزی که معمولاً Scoop و PowerShell رو داره

    # دسترسی‌های لازم برای GITHUB_TOKEN برای کامیت و پوش کردن تغییرات
    permissions:
      contents: write

    steps:
      - name: Checkout Repository # مرحله ۱: دانلود کد مخزن شما به ماشین مجازی اکشن
        uses: actions/checkout@v4
        with:
          # استفاده از GITHUB_TOKEN برای عملیاتی مثل push کردن تغییرات.
          # این توکن به طور خودکار توسط گیت‌هاب فراهم می‌شه.
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Scoop # مرحله ۲: نصب و آماده‌سازی Scoop در محیط اجرایی اکشن
        uses: MinoruSekine/setup-scoop@v1 # استفاده از یک اکشن آماده و معتبر برای نصب Scoop
        with:
          scoop_branch: 'master' # می‌توانید از 'develop' هم استفاده کنید اگر به آخرین ویژگی‌های Scoop نیاز دارید

      - name: Set up Python # مرحله ۳: نصب نسخه مشخصی از پایتون
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # یا هر نسخه دیگری از پایتون ۳ که ترجیح می‌دهید

      - name: Install Python dependencies # مرحله ۴: نصب کتابخانه‌های پایتون مورد نیاز اسکریپت
        run: |
          python -m pip install --upgrade pip
          pip install requests # کتابخانه requests برای دانلود فایل‌ها استفاده می‌شود
        shell: pwsh # اجرای دستورات با PowerShell

      - name: Run Python script to update manifests # مرحله ۵: اجرای اسکریپت پایتون شما
        id: run_update_script # یک شناسه برای این مرحله (اختیاری)
        run: python update_manifests.py # فرض بر این است که اسکریپت در ریشه ریپازیتوری قرار دارد
        shell: pwsh
        # اسکریپت پایتون خودش باید خطاهایش رو مدیریت کنه و پیغام‌های مناسب چاپ کنه.
        # اگر اسکریپت پایتون با کد خطای غیر صفر خارج بشه، این مرحله (و در نتیجه کل job) فیل می‌شه.

      - name: Commit and Push Changes # مرحله ۶: کامیت و پوش کردن تغییرات در صورت وجود
        run: |
          git config --global user.name "GitHub Action Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # بررسی می‌کنه آیا تغییری برای کامیت کردن وجود داره یا نه
          # git diff --quiet HEAD اگر تغییری نباشه با کد 0 خارج می‌شه، در غیر این صورت با کد 1
          if ! git diff --quiet HEAD; then
            echo "Changes detected, committing and pushing..."
            # فقط فایل‌های مانیفست داخل پوشه bucket و فایل README.md رو اضافه می‌کنه
            # این کار از اضافه شدن ناخواسته فایل‌های دیگه جلوگیری می‌کنه
            git add bucket/*.json README.md 
            git commit -m "Automated: Update app manifests and README (Python)"
            # اگر کامیت به خاطر اینکه هیچ فایلی add نشده ناموفق بود (مثلاً اگر README.md و پوشه bucket وجود نداشتن)،
            # با || true از فیل شدن این مرحله جلوگیری می‌کنیم، چون ممکنه واقعاً تغییری نبوده.
            # اما اگر git add چیزی رو اضافه کرده باشه و کامیت انجام بشه، پوش انجام می‌شه.
            git push || echo "No effective changes to push or push failed." 
          else
            echo "No changes to commit."
          fi
        shell: bash # دستورات گیت معمولاً در شل bash در اکشن‌ها راحت‌تر اجرا می‌شن