name: Update Scoop Bucket (Multi-Script)

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: '30 16 * * *' # Daily at 16:30 UTC

jobs:
  update_bucket_files:
    runs-on: windows-latest

    permissions:
      contents: write # Needed to commit changes back to the repository

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Scoop Manually
        shell: pwsh
        run: |
          Write-Host "Attempting to install Scoop manually..."
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
          try {
            Invoke-RestMethod -Uri https://get.scoop.sh -OutFile scoop_installer.ps1
          } catch {
            Write-Error "Failed to download Scoop installer script. Error: $($_.Exception.Message)"
            # Fallback to iwr if Invoke-RestMethod fails (less common for this URL)
            Write-Host "Trying with Invoke-WebRequest..."
            Invoke-WebRequest -Uri https://get.scoop.sh -OutFile scoop_installer.ps1
          }
          
          if (Test-Path scoop_installer.ps1) {
            Write-Host "Scoop installer downloaded. Running installer..."
            # Install to default location: C:\Users\<user>\scoop
            # The -RunSelfUpdate switch ensures Scoop updates itself immediately after installation.
            .\scoop_installer.ps1 -RunSelfUpdate -ScoopDir "$HOME\scoop"
            Write-Host "Scoop installation script executed."
            
            # Add Scoop shims to GITHUB_PATH for subsequent steps in this job
            $ScoopShimsPath = "$HOME\scoop\shims"
            Add-Content -Path $env:GITHUB_PATH -Value $ScoopShimsPath
            Write-Host "Added $ScoopShimsPath to GITHUB_PATH."

            # Also add to current session's PATH for immediate use in subsequent run blocks if needed
            $env:PATH = "$ScoopShimsPath;$env:PATH"
            Write-Host "Added $ScoopShimsPath to current session PATH."

          } else {
            Write-Error "Scoop installer script (scoop_installer.ps1) not found after download attempt."
            exit 1
          }

      - name: Update Scoop itself and core buckets
        shell: pwsh
        run: |
          Write-Host "Updating Scoop and core buckets..."
          scoop update scoop
          scoop bucket rm main -ErrorAction SilentlyContinue
          scoop bucket add main -ErrorAction SilentlyContinue
          scoop bucket rm extras -ErrorAction SilentlyContinue
          scoop bucket add extras -ErrorAction SilentlyContinue
          scoop update # Update all buckets
        continue-on-error: true

      - name: Verify Scoop installation and checkver command
        shell: pwsh
        run: |
          Write-Host "--- Verifying Scoop Installation ---"
          $ScoopExe = Get-Command scoop.exe -ErrorAction SilentlyContinue
          if ($ScoopExe) {
            Write-Host "Scoop executable path (from Get-Command): $($ScoopExe.Source)"
          } else {
            Write-Warning "scoop.exe not found via Get-Command."
          }
          
          $ExpectedScoopShimsPath = "$HOME\scoop\shims"
          Write-Host "Expected Scoop Shims Path: $ExpectedScoopShimsPath"
          if (Test-Path $ExpectedScoopShimsPath) {
            Write-Host "Expected shims path exists."
          } else {
            Write-Warning "Expected shims path DOES NOT exist."
          }

          Write-Host "PATH environment variable:"
          $env:PATH -split ';' | ForEach-Object { Write-Host "  $_" }
          
          Write-Host "Scoop Version:"
          scoop.exe --version -ErrorAction SilentlyContinue
          Write-Host "Scoop Help (check for checkver):"
          scoop.exe help -ErrorAction SilentlyContinue
          scoop.exe help checkver -ErrorAction SilentlyContinue
          Write-Host "Scoop Status:"
          scoop.exe status -ErrorAction SilentlyContinue
          Write-Host "--- End Verification ---"
        continue-on-error: true

      - name: Run PowerShell Script to Update Manifest Versions & URLs
        id: update_versions_urls
        run: ./Update-ScoopVersions.ps1 -BucketPath "./bucket"
        shell: pwsh
        continue-on-error: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: python -m pip install --upgrade pip && pip install requests
        shell: pwsh

      - name: Run Python script to Update Hashes and README
        id: update_hashes_readme
        env:
          PYTHONIOENCODING: UTF-8
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: python Update-HashesAndReadme.py
        shell: pwsh

      - name: Commit and Push Changes
        run: |
          git config --global user.name "GitHub Action Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "--- Git Status Before Diff ---"
          git status
          echo "--- End Git Status ---"
          
          if ! git diff --quiet HEAD; then
            echo "Changes detected, committing and pushing..."
            git add bucket/*.json README.md
            git commit -m "Automated: Update app manifests, hashes, and README"
            git push
          else
            echo "No changes to commit."
          fi
        shell: bash
