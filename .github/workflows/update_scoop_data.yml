name: Update Scoop Bucket (Multi-Script)

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: '30 16 * * *' # Daily at 16:30 UTC

jobs:
  update_bucket_files:
    runs-on: windows-latest

    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Scoop, Verify Module, Update Buckets, and Run Script
        id: scoop_operations
        shell: pwsh
        run: |
          Write-Host "Attempting to install Scoop manually..."
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
          $ErrorActionPreference = "Stop"
          try {
            Invoke-RestMethod -Uri https://get.scoop.sh -OutFile scoop_installer.ps1
          } catch {
            Write-Warning "Invoke-RestMethod failed. Error: $($_.Exception.Message)"
            Write-Host "Trying with Invoke-WebRequest..."
            Invoke-WebRequest -Uri https://get.scoop.sh -OutFile scoop_installer.ps1
          }
          $ErrorActionPreference = "Continue"

          if (!(Test-Path scoop_installer.ps1)) {
            Write-Error "Scoop installer script not found."
            exit 1
          }

          Write-Host "Running Scoop installer..."
          $env:SCOOP = "$HOME\scoop"
          if (-not (Test-Path $env:SCOOP)) {
            New-Item -ItemType Directory -Path $env:SCOOP -Force | Out-Null
          }
          .\scoop_installer.ps1 -RunSelfUpdate -ScoopDir $env:SCOOP
          Write-Host "Scoop installation script executed."

          $ScoopShimsPath = Join-Path $env:SCOOP "shims"
          $ScoopModulePath = Join-Path $env:SCOOP "apps\scoop\current\modules\scoop.psm1"
          Write-Host "Determined Scoop Shims Path: $ScoopShimsPath"
          Write-Host "Expected Scoop Module Path: $ScoopModulePath"

          # CRITICAL CHECK: Verify module existence immediately after install
          if (Test-Path $ScoopModulePath -PathType Leaf) {
            Write-Output "SUCCESS: Scoop module file FOUND at '$ScoopModulePath' immediately after install."
          } else {
            Write-Error "CRITICAL POST-INSTALL CHECK: Scoop module file NOT FOUND at '$ScoopModulePath'."
            Write-Host "Listing contents of '$($env:SCOOP)\apps\scoop\current\modules\' (if it exists):"
            Get-ChildItem (Join-Path $env:SCOOP "apps\scoop\current\modules") -ErrorAction SilentlyContinue | ForEach-Object { Write-Output "  - $($_.Name)" }
            Write-Host "Listing contents of '$($env:SCOOP)\apps\scoop\current\':"
            Get-ChildItem (Join-Path $env:SCOOP "apps\scoop\current") -ErrorAction SilentlyContinue | ForEach-Object { Write-Output "  - $($_.Name)" }
            exit 1 # Fail fast if module is missing, as it's critical
          }
          
          Add-Content -Path $env:GITHUB_PATH -Value $ScoopShimsPath
          Write-Host "Added '$ScoopShimsPath' to GITHUB_PATH."
          if ($env:PATH -notlike "*$ScoopShimsPath*") {
            $env:PATH = "$ScoopShimsPath;$env:PATH"
            Write-Host "Added '$ScoopShimsPath' to current session PATH."
          } else {
            Write-Host "'$ScoopShimsPath' was already in current session PATH."
          }

          Write-Host "Verifying Scoop command (via shim in PATH)..."
          scoop --version
          scoop status
          Remove-Item scoop_installer.ps1 -Force

          Write-Host "Updating Scoop and core buckets..."
          scoop update scoop
          scoop bucket rm main -ErrorAction SilentlyContinue
          scoop bucket add main
          scoop bucket rm extras -ErrorAction SilentlyContinue
          scoop bucket add extras
          scoop update
          Write-Host "Scoop and core buckets update process finished."

          $ScriptPath = "./Update-ScoopVersions.ps1"
          Write-Host "Running PowerShell Script: $ScriptPath with Shims Path parameter '$ScoopShimsPath'"
          if (!(Test-Path $ScriptPath)) {
            Write-Error "$ScriptPath not found"
            exit 1
          }
          # The script Update-ScoopVersions.ps1 (v9_module_focus) will now use this path to find the module
          & $ScriptPath -BucketPath "./bucket" -ProvidedScoopShimsPath $ScoopShimsPath
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "Update-ScoopVersions.ps1 script finished with exit code $LASTEXITCODE."
            # exit 1 # Optionally fail the job
          } else {
            Write-Host "Update-ScoopVersions.ps1 script finished successfully."
          }

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: python -m pip install --upgrade pip && pip install requests
        shell: pwsh

      - name: Run Python script to Update Hashes and README
        id: update_hashes_readme
        env:
          PYTHONIOENCODING: UTF-8
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: python Update-HashesAndReadme.py
        shell: pwsh

      - name: Commit and Push Changes
        run: |
          git config --global user.name "GitHub Action Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git status
          git add bucket/*.json README.md
          git status
          if ! git diff --cached --quiet; then
            echo "Changes detected, committing..."
            git commit -m "Automated: Update app manifests, hashes, and README"
            git push
          else
            echo "No staged changes to commit."
          fi
        shell: bash
