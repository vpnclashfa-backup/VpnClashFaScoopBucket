name: Update Scoop Bucket (Multi-Script)

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: '30 16 * * *' # Daily at 16:30 UTC

jobs:
  update_bucket_files:
    runs-on: windows-latest

    permissions:
      contents: write # Needed to commit changes back to the repository

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Scoop, Update Buckets, and Run Update-ScoopVersions.ps1
        shell: pwsh
        run: |
          Write-Host "Attempting to install Scoop manually..."
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
          $ErrorActionPreference = "Stop" # Stop on first error for this block
          try {
            Invoke-RestMethod -Uri https://get.scoop.sh -OutFile scoop_installer.ps1
          } catch {
            Write-Warning "Invoke-RestMethod failed. Error: $($_.Exception.Message)"
            Write-Host "Trying with Invoke-WebRequest..."
            Invoke-WebRequest -Uri https://get.scoop.sh -OutFile scoop_installer.ps1
          }
          $ErrorActionPreference = "Continue" # Reset error action preference

          if (!(Test-Path scoop_installer.ps1)) {
            Write-Error "Scoop installer script (scoop_installer.ps1) not found after download attempt."
            exit 1
          }

          Write-Host "Scoop installer downloaded. Running installer..."
          $env:SCOOP = "$HOME\scoop" # Explicitly set SCOOP env var
          .\scoop_installer.ps1 -RunSelfUpdate -ScoopDir $env:SCOOP
          Write-Host "Scoop installation script executed."
          
          $ScoopShimsPath = Join-Path $env:SCOOP "shims"
          Write-Host "Determined Scoop Shims Path: $ScoopShimsPath"
          
          # Add Scoop shims to GITHUB_PATH for any *future* steps
          # This ensures if other PowerShell steps are added later, they might pick it up.
          Add-Content -Path $env:GITHUB_PATH -Value $ScoopShimsPath
          Write-Host "Added '$ScoopShimsPath' to GITHUB_PATH (for potential future steps)."

          # Crucially, add to current session's PATH for immediate use in *this* run block
          # Ensure it's added only once to avoid excessive duplication if script runs multiple times in theory
          if ($env:PATH -notlike "*$ScoopShimsPath*") {
            $env:PATH = "$ScoopShimsPath;$env:PATH"
            Write-Host "Added '$ScoopShimsPath' to current session PATH."
          } else {
            Write-Host "'$ScoopShimsPath' already in current session PATH."
          }
          Write-Host "Updated PATH for current session: $env:PATH"

          # Verify Scoop immediately in this session
          Write-Host "Verifying Scoop installation immediately in this session..."
          scoop --version
          scoop status
          
          Remove-Item scoop_installer.ps1 -Force
          Write-Host "Removed scoop_installer.ps1."

          # --- Update Scoop itself and core buckets ---
          Write-Host "Updating Scoop and core buckets..."
          scoop update scoop
          scoop bucket rm main -ErrorAction SilentlyContinue 
          scoop bucket add main
          scoop bucket rm extras -ErrorAction SilentlyContinue 
          scoop bucket add extras
          scoop update
          Write-Host "Scoop and core buckets update process finished."

          # --- Run PowerShell Script to Update Manifest Versions & URLs ---
          Write-Host "Running PowerShell Script: ./Update-ScoopVersions.ps1 with Shims Path parameter"
          # Pass the determined $ScoopShimsPath to the script
          ./Update-ScoopVersions.ps1 -BucketPath "./bucket" -ProvidedScoopShimsPath $ScoopShimsPath
          Write-Host "Update-ScoopVersions.ps1 script finished."

      # Python steps remain separate
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: python -m pip install --upgrade pip && pip install requests
        shell: pwsh

      - name: Run Python script to Update Hashes and README
        id: update_hashes_readme
        env:
          PYTHONIOENCODING: UTF-8
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: python Update-HashesAndReadme.py
        shell: pwsh

      - name: Commit and Push Changes
        run: |
          git config --global user.name "GitHub Action Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "--- Git Status Before Add ---"
          git status
          
          git add bucket/*.json README.md
          
          echo "--- Git Status After Add (Before Commit) ---"
          git status

          if ! git diff --cached --quiet; then
            echo "Changes detected and staged, committing and pushing..."
            git commit -m "Automated: Update app manifests, hashes, and README"
            git push
          else
            echo "No staged changes to commit."
          fi
        shell: bash
