name: Update Scoop Bucket (Using Scoop Source - Diagnostic Checkout)

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: '0 22 * * *' # Runs daily at 22:00 UTC

jobs:
  update_bucket_files:
    runs-on: windows-latest

    permissions:
      contents: write 

    steps:
      - name: Checkout Your Bucket Repository (VpnClashFaScoopBucket)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # Path defaults to GITHUB_WORKSPACE

      - name: Checkout Scoop Source Code
        uses: actions/checkout@v4
        with:
          repository: ScoopInstaller/Scoop 
          path: scoop_source_checkout # Checks out to $GITHUB_WORKSPACE/scoop_source_checkout
          ref: master # Explicitly use master branch for stability
          # fetch-depth: 0 # Uncomment for full history if needed, default is 1 for actions/checkout@v4

      - name: Diagnostic File Listing for Scoop Source Checkout
        id: diagnostic_listing
        shell: pwsh
        run: |
          $ScoopSourceDir = "$env:GITHUB_WORKSPACE\scoop_source_checkout"
          Write-Host "--- Diagnostic: Listing Scoop Source Checkout at '$ScoopSourceDir' ---"
          
          Write-Host "Checking existence of '$ScoopSourceDir': $(Test-Path $ScoopSourceDir -PathType Container)"
          Write-Host "Top-level contents of '$ScoopSourceDir':"
          Get-ChildItem -Path $ScoopSourceDir -Depth 0 -Force | ForEach-Object { Write-Output "  L0: $($_.Name) (Mode: $($_.Mode))" }
          
          $ScoopModulesDir = Join-Path $ScoopSourceDir "modules"
          Write-Host "Checking existence of '$ScoopModulesDir': $(Test-Path $ScoopModulesDir -PathType Container)"
          Write-Host "Contents of '$ScoopModulesDir' (if it exists):"
          Get-ChildItem -Path $ScoopModulesDir -ErrorAction SilentlyContinue -Force | ForEach-Object { Write-Output "  L1-Modules: $($_.Name) (Mode: $($_.Mode), Length: $($_.Length))" }
          
          $ExpectedModuleFile = Join-Path $ScoopModulesDir "scoop.psm1"
          Write-Host "Checking existence of '$ExpectedModuleFile': $(Test-Path $ExpectedModuleFile -PathType Leaf)"
          if (Test-Path $ExpectedModuleFile -PathType Leaf) {
            Write-Host "SUCCESS (Diagnostic): '$ExpectedModuleFile' exists."
          } else {
            Write-Error "FAILURE (Diagnostic): '$ExpectedModuleFile' does NOT exist."
          }
          Write-Host "--- End Diagnostic ---"

      - name: Set up Scoop Environment and Run Update-ScoopVersions.ps1
        id: scoop_operations
        shell: pwsh
        run: |
          $env:SCOOP_HOME = "$env:GITHUB_WORKSPACE\scoop_source_checkout" 
          echo "SCOOP_HOME=$($env:SCOOP_HOME)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "SCOOP_HOME set to: $($env:SCOOP_HOME)"

          $ScoopSourceBinPath = Join-Path $env:SCOOP_HOME "bin"
          if ($env:PATH -notlike "*$ScoopSourceBinPath*") {
            $env:PATH = "$ScoopSourceBinPath;$($env:PATH)"
            Write-Host "Added '$ScoopSourceBinPath' to current session PATH."
          }
          Add-Content -Path $env:GITHUB_PATH -Value $ScoopSourceBinPath
          Write-Host "Added '$ScoopSourceBinPath' to GITHUB_PATH."
          
          # This check is now somewhat redundant if the diagnostic step passes, but kept for safety
          $ScoopModulePathFromSource = Join-Path $env:SCOOP_HOME "modules\scoop.psm1"
          Write-Host "Verifying Module Path (in main script block): $ScoopModulePathFromSource"
          if (!(Test-Path $ScoopModulePathFromSource -PathType Leaf)) {
            Write-Error "CRITICAL FAILURE (in main script block): Scoop module file '$ScoopModulePathFromSource' NOT FOUND."
            Write-Host "This suggests an issue with file visibility or persistence between steps, or the checkout failed to retrieve it."
            exit 1
          }
          Write-Output "SUCCESS (in main script block): Scoop module file FOUND at '$ScoopModulePathFromSource'."
          
          $ScriptPath = "./Update-ScoopVersions.ps1" 
          Write-Host "Running PowerShell Script: $ScriptPath"
          if (!(Test-Path $ScriptPath)) {
            Write-Error "Update-ScoopVersions.ps1 not found at '$ScriptPath'."
            exit 1
          }
          & $ScriptPath -BucketPath "./bucket" 
          
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "Update-ScoopVersions.ps1 script finished with non-zero exit code: $LASTEXITCODE."
          } else {
            Write-Host "Update-ScoopVersions.ps1 script finished successfully."
          }

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: python -m pip install --upgrade pip && pip install requests
        shell: pwsh

      - name: Run Python script to Update Hashes and README
        id: update_hashes_readme
        env:
          PYTHONIOENCODING: UTF-8
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: python ./Update-HashesAndReadme.py 
        shell: pwsh

      - name: Commit and Push Changes
        run: |
          git config --global user.name "GitHub Action Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          echo "--- Git Status Before Add (in $(pwd)) ---"
          git status
          git add bucket/*.json README.md
          echo "--- Git Status After Add (Before Commit in $(pwd)) ---"
          git status
          if ! git diff --cached --quiet; then
            echo "Changes detected and staged, committing and pushing..."
            git commit -m "Automated: Update app manifests, hashes, and README"
            git push
          else
            echo "No staged changes to commit."
          fi
        shell: bash
