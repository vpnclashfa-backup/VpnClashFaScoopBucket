name: Update Scoop Bucket (Multi-Script)

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: '30 16 * * *' # Daily at 16:30 UTC

jobs:
  update_bucket_files:
    runs-on: windows-latest

    permissions:
      contents: write # Needed to commit changes back to the repository

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Scoop Manually and Verify
        shell: pwsh
        run: |
          Write-Host "Attempting to install Scoop manually..."
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
          $ErrorActionPreference = "Stop" # Stop on first error for this block
          try {
            Invoke-RestMethod -Uri https://get.scoop.sh -OutFile scoop_installer.ps1
          } catch {
            Write-Warning "Invoke-RestMethod failed. Error: $($_.Exception.Message)"
            Write-Host "Trying with Invoke-WebRequest..."
            Invoke-WebRequest -Uri https://get.scoop.sh -OutFile scoop_installer.ps1
          }
          $ErrorActionPreference = "Continue" # Reset error action preference

          if (Test-Path scoop_installer.ps1) {
            Write-Host "Scoop installer downloaded. Running installer..."
            # Install to default location and run self-update
            # Explicitly set SCOOP env var as installer might not set it for current session immediately
            $env:SCOOP = "$HOME\scoop" 
            .\scoop_installer.ps1 -RunSelfUpdate -ScoopDir $env:SCOOP
            Write-Host "Scoop installation script executed."
            
            $ScoopShimsPath = Join-Path $env:SCOOP "shims"
            
            # Add Scoop shims to GITHUB_PATH for subsequent steps in this job
            Add-Content -Path $env:GITHUB_PATH -Value $ScoopShimsPath
            Write-Host "Added '$ScoopShimsPath' to GITHUB_PATH."

            # Also add to current session's PATH for immediate use
            $env:PATH = "$ScoopShimsPath;$env:PATH"
            Write-Host "Added '$ScoopShimsPath' to current session PATH."
            Write-Host "Updated PATH: $env:PATH"

            # Verify Scoop immediately
            Write-Host "Verifying Scoop installation immediately..."
            scoop --version
            scoop status
            
            # Clean up installer script
            Remove-Item scoop_installer.ps1 -Force
            Write-Host "Removed scoop_installer.ps1."

          } else {
            Write-Error "Scoop installer script (scoop_installer.ps1) not found after download attempt."
            exit 1
          }

      - name: Update Scoop itself and core buckets
        shell: pwsh
        run: |
          Write-Host "Updating Scoop and core buckets..."
          # These commands should now work if Scoop PATH is correctly set from previous step
          scoop update scoop
          scoop bucket rm main # No -ErrorAction needed here due to continue-on-error for step
          scoop bucket add main
          scoop bucket rm extras
          scoop bucket add extras
          scoop update
        continue-on-error: true # Allows the workflow to continue even if bucket operations fail

      - name: Verify Scoop installation and checkver command (again for clarity)
        shell: pwsh
        run: |
          Write-Host "--- Verifying Scoop Installation (Post-Bucket Update) ---"
          $ScoopExe = Get-Command scoop.exe -ErrorAction SilentlyContinue
          if ($ScoopExe) {
            Write-Host "Scoop executable path (from Get-Command): $($ScoopExe.Source)"
            Write-Host "Scoop Version:"
            scoop.exe --version
            Write-Host "Scoop Help (check for checkver):"
            scoop.exe help checkver
            Write-Host "Scoop Status:"
            scoop.exe status
          } else {
            Write-Warning "scoop.exe still not found via Get-Command at this stage."
            Write-Host "Current PATH: $env:PATH"
          }
          Write-Host "--- End Verification ---"
        continue-on-error: true

      - name: Run PowerShell Script to Update Manifest Versions & URLs
        id: update_versions_urls
        run: ./Update-ScoopVersions.ps1 -BucketPath "./bucket"
        shell: pwsh
        continue-on-error: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: python -m pip install --upgrade pip && pip install requests
        shell: pwsh

      - name: Run Python script to Update Hashes and README
        id: update_hashes_readme
        env:
          PYTHONIOENCODING: UTF-8
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: python Update-HashesAndReadme.py
        shell: pwsh

      - name: Commit and Push Changes
        run: |
          git config --global user.name "GitHub Action Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "--- Git Status Before Add ---"
          git status
          
          # Add only specific files that are expected to change
          git add bucket/*.json README.md
          
          echo "--- Git Status After Add (Before Commit) ---"
          git status

          # Check if there are staged changes to commit
          if ! git diff --cached --quiet; then
            echo "Changes detected and staged, committing and pushing..."
            git commit -m "Automated: Update app manifests, hashes, and README"
            git push
          else
            echo "No staged changes to commit."
          fi
        shell: bash
